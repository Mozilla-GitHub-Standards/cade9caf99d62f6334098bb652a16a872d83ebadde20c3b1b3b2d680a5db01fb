location /social_ldap_pwless {
      access_by_lua '
	  -- Lua reference for nginx: https://github.com/openresty/lua-nginx-module
	  -- Lua reference for openidc: https://github.com/pingidentity/lua-resty-openidc
	  local opts = {
	     -- the full redirect URI must be protected by this script and becomes:
	     -- ngx.var.scheme.."://"..ngx.var.http_host..opts.redirect_uri_path
	     -- unless the scheme is overridden using opts.redirect_uri_scheme or an X-Forwarded-Proto
	     -- header in the incoming request
	     redirect_uri_path = "/social_ldap_pwless/redirect_uri",
	     discovery = "https://op.example.net/.well-known/openid-configuration",
	     client_id = "YOUR CLIENT ID HERE",
	     client_secret = "YOUR CLIENT SECRET HERE",
	     scope = "openid email profile",
	     iat_slack = 600,
	     redirect_uri_scheme = "https",
	     logout_path = "/social_ldap_pwless/logout"
	  }

	  -- call authenticate for OpenID Connect user authentication
	  local oidc = require("resty.openidc")
	  local os = require("os")
	  local json = require( "cjson" )
	  local session = require("resty.session").open()

	  -- set session lifetime to id_token lifetime and other parameters
	  session.cookie.path = "/social_ldap_pwless/"
	  session.cookie.persistent = true
	  opts.session = session
	  local res, err = oidc.authenticate(opts)

	  -- Check if authentication succeeded (session needs to be up for that)
	  if err then
	    local url = session.cookie.path
	    session:destroy()
	    ngx.redirect(url)
	  end
	  session.cookie.lifetime = tonumber(res.id_token.exp) - os.time()
	  session:save()

	  -- Renew id_token with the delegation endpoint
	  local body = { client_id = opts.client_id,
			 api_type = "app",
			 grant_type = "urn:ietf:params:oauth:grant-type:jwt-bearer",
			 id_token = session.data.enc_id_token
	  }
	  local http = require("resty.http")
	  local httpc = http.new()
--                  local res, err = httpc:request_uri(endpoint, {
--                    method = "POST",
--                    body = ngx.encode_args(body),
--                    ssl_verify = true
--                    }
--                  )
	  if not res then
	    ngx.log(ngx.ERR, "accessing id_token delegation endpoint failed: "..err)
	    ngx.status(500)
	    ngx.say(err)
	    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
	  end
	  ngx.log(ngx.DEBUG, "delegation endpoint response: ", res.body)

	  -- set headers with user info and OIDC claims
	  ngx.req.set_header("REMOTE_USER", res.id_token.user_id)
	  ngx.req.set_header("OIDC_CLAIM_ACCESS_TOKEN", res.access_token)
	  ngx.req.set_header("OIDC_CLAIM_ID_TOKEN", session.data.enc_id_token)
	  local function build_headers(t, name)
	    for k,v in pairs(t) do
	      -- unpack tables
	      if type(v) == "table" then
		local j = json.encode(v)
		ngx.req.set_header("OIDC_CLAIM_"..name..k, j)
	      else
		ngx.req.set_header("OIDC_CLAIM_"..name..k, tostring(v))
	      end
	    end
	  end
	  build_headers(res.id_token, "ID_TOKEN_")
	  build_headers(res.user, "USER_PROFILE_")
      ';
}
