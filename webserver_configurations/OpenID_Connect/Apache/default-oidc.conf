# This is behind an Nginx proxy, thus:
# a) our URL is always prefixed with /apache/
# b) Nginx terminates TLS. Refer to Apache documentation in order to enable TLS directly in Apache (via mod_ssl for example)
# c) We listen on port 81, which is not listening to the world.
<VirtualHost *:81>
    ServerAdmin webmaster@testrp.security.allizom.org
    ServerName testrp.security.allizom.org
    DocumentRoot /var/www/apache/social_ldap_pwless

    # Complete list of settings for this module can be found at:
    # https://github.com/pingidentity/mod_auth_openidc/blob/master/auth_openidc.conf

    OIDCProviderMetadataURL https://op.example.net/.well-known/openid-configuration
    OIDCRedirectURI https://testrp.security.allizom.org/apache/social_ldap_pwless/redirect_uri

    OIDCClientID YOUR_CLIENT_ID_HERE
    OIDCClientSecret YOUR_CLIENT_SECRET_HERE
    OIDCResponseType "code"

    # Setup session handling
    # 1) Ensure the session cookie created follows the id_token expiration ("exp" attribute) expiration time
    # 2) Recheck id token and user profile endpoints every 15 minutes
    OIDCScope "openid email profile"
    OIDCOAuthTokenExpiryClaim exp absolute mandatory
    OIDCPassIDTokenAs claims serialized
    OIDCOAuthTokenIntrospectionInterval 15
    OIDCUserInfoRefreshInterval 15
    OIDCSessionMaxDuration 0

    OIDCCryptoPassphrase RANDOM_STRING # Output of `openssl rand -base64 24' for example. Needs to be random.
    OIDCCookiePath /apache/social_ldap_pwless/
    OIDCCookieDomain testrp.security.allizom.org

    <Location />
        AuthType openid-connect
    # Only allow authenticated users.
        Require valid-user

# Uncomment this if you want to only allow users who authenticated with MFA in
# You can form similar rules by using other claims, such as roles or groups of course!
#        Require claim multifactor:duo

# Uncomment this if you need more debugging information in the logs
#        LogLevel debug
    </Location>

</VirtualHost>
